{   "possible_values":[
  "",
  "Copyright 2023 National Instruments Corporation",
  "",
  "SPDX-License-Identifier: MIT",
  "",
  "------- Parameters Description and possible values--------",
  "----------------------------------------------------------",
  "rx_recorded_data_path: path to store captured rx data, type = str",
  "rx_recorded_data_saving_format: rx recorded data saving format, type = str, possible values (SigMF)",
  "nrecords: number of snapshots from RX IQ data acquisition",
  "txs_execution: parallel --> TX USRPs will transmit their related waveform simultaneously (in parallel)",
  ".............: sequential--> TX USRPs will transmit their related waveform one by one in sequential manner: Transmit wavefor1, record IQ data, Transmit waveform2, record...",
  ".............: Note: If there are more than one RX USRP, they will run in parallel.",
  "wireless_link_parameter_map: Parameters pair is given via parameter map dictionary (e.g. RFWS parameter name vs. SigMF meta-data parameter name)",
  "This will be replaced in future releases by a dictionary that includes a list of parameters for each standard individually.",
  "enable_console_logging: Enable or disable console logging --> True",
  "Author name, handle, email, and/or other ID like Amateur Call Sign",
  "description: user description for the test case",
  "captured_data_file_name: user preferred name for rx captured data",
  "comment: user comment",
  "use_tx_timestamp: boolean, enable it if API is integrated to system",
  " and TX waveform time stamp is used as a reference for all recorded files, SigMF collection",
  "enable_mmwave: True or False, enable mmwave support",
  "DeviceName: Arbitrary device name, type=str",
  "RFmode:Tx or Rx, type=str",
  "type: USRP type, for example: x300, x4xx, type=str",
  "IPaddress: IP address of USRP, type=str",
  "....Note: USRP type and IPaddress will be used to create Device args to use when connecting to the USRP",
  "Seqtype: The parameter values can be given in range (start, stop, step), list, or single.",
  "freq: RF target center frequency in Hz, type = float",
  "lo_offset: type=float, LO offset in Hz",
  "enable_lo_offset: True or False, Enable LO offset",
  "rate : rate of radio block, type = float",
  "rate_source: waveform_config: The rate will be read from the waveform config file.",
  "...........: user_defined: The given rate by the user in this config file will be used.",
  "bandwidth: TX analog front-end filter bandwidth in Hz, type = float",
  "...........: If rate_source --> waveform_config: It will be read from the waveform config file.",
  "...........: If rate_source --> user_defined: The given bandwidth by the user in this config file will be used.",
  "waveform_generator: Name of waveform generator, name should be added to wireless_link_parameter_map.yaml",
  " .................: example: 5gnr_ni_rfmx_rfws",
  "waveform_file_name: TX waveform file name without extension, type = str",
  "NR_FR1_DL_FDD_SISO_BW-20MHz_CC-1_SCS-30kHz_Mod-64QAM_OFDM_TM3.1(.tdms)",
  "IEEE_tx11ac_legacy_20MHz_80MSps_MCS7_27bytes_1frame (folder name), waveform in ssb_str.mat ",
  "waveform_path:path to tx waveform file or folder, type = str ",
  "waveform_path_type: type of waveform path:relative or absolute",
  "...absolute: Full path to waveform should be given to use waveforms from another directory",
  "...relative: path related to waveform folder given with the API, i.e waveforms/nr/",
  "waveform_format:possible values: tdms, matlab_ieee, or matlab, type = str ",
  "gain: gain for the RF chain, type = float",
  "antenna: TX antenna selection (TX/RX), type = str",
  "antenna: RX antenna selection (TX/RX, RX2), type = str",
  "channels: Rx Channel selection (0,1)",
  "reference: Rx sync reference source (internal, external, gpsdo, type = str",
  "duration: Rx Time duration of IQ data acquisition, type=float",
  "channel_attenuation_db: expected channel attenuation in dB, type = float",
  "tx_reference: Tx sync reference source (internal, external, gpsdo, type = str",
  "tx_radio_id: radio block to use (e.g., 0 or 1), type = int",
  "tx_radio_chan: radio channel to use, type = int",
  "tx_replay_id:replay block to use (e.g., 0 or 1), type = int",
  "tx_replay_chan: replay channel to use, type = int ",
  "tx_duc_chan: duc channel to use, type = int ",
  "tx_duc_id: duc id to use, type = int ",
  "serial_number: serial number of mmWave analog beamformer (eg. BBox One/Lite) or up down converter, type = str",
  "antenna_array_specification_table: file name of array antenna table recorded basic information about the array antenna, type = str",
  "rf_frequency: operating frequency of mmWave analog beamformer or RF frequency of mmWave up down converter, type = float ",
  "beamformer_config_mode: Indicate different method to configure the beamformer using 'per_antenna_element' and 'target_beam_properties', type = str ",
  "......................per_antenna_element: configure with gains and phases per channel and can also disable channels",
  "......................target_beam_properties: set target beam angles (patterns) with target azimuth, elevation angles and a target gain (for the main lobe)",
  "disabled_antenna_elements: channel indexes (starts from 1) powered off of mmWave analog beamformer, when no channels are disabled the string should be empty, type = str",
  "antenna_element_gain_list: gain (db) (eg. 10.5 ) for each channels of mmWave analog beamformer. Take effect in 'per_antenna_element' mode, type = str ",
  "antenna_element_phase_list_deg: phase (deg) (0 to 360) for each channels of mmWave analog beamformer. Take effect in 'per_antenna_element' mode, type = str ",
  "beam_gain_db: target resulting beamformer gain in the beam pattern main lobe (db) of mmWave analog beamformer. Take effect in 'target_beam_properties' mode, type = float ",
  "beam_angle_elevation_deg: beam steering angle (Theta deg) between the positive Z-axis and the vector of mmWave analog beamformer. Take effect in 'target_beam_properties' mode, type = int ",
  "beam_angle_azimuth_deg: beam steering angle (Phi deg) between the projection of the vector of mmWave analog beamformer onto the xy-plane and the positive X-axis. Take effect in 'target_beam_properties' mode, type = int ",
  "num_channels: The number of channels for the mmwave up down converter, type = int ",
  "if_frequency: IF frequency (Hz) of mmWave up down converter, type = int",
  "rf_frequency: RF frequency (Hz) of mmWave up down converter, type = int",
  "lo_frequency: LO frequency (Hz) of mmWave up down converter, type = int",
  "bandwidth: bandwidth (Hz) of mmWave up down converter, type = int",
  "disabled_channels: channel indexes (starts from 1) powered off of up down converter, empty string means no channels are disabled, type = str",
  "enable_10MHz_clock_out: True or False, 10 MHz reference source output enable of mmWave up down converter which is available for synchronizing with clock source of other device",
  "enable_100MHz_clock_out: True or False, 100 MHz reference source output enable of mmWave up down converter, when True, 'clock_reference_100MHz' should be 'internal'",
  "clock_reference_100MHz: 'internal' or 'external', use internal or external 100 MHz reference clock source of mmWave up down converter, when use external clock, 'enable_100MHz_clock_out' should be False, type = str",
  "enable_5V_out: True or False, output 5V power enable of mmWave up down converter",
  "enable_9V_out: True or False, output 9V power enable of mmWave up down converter"
],
  "general_config": {
    "rx_recorded_data_path": "/home/user/workarea/recorded-data",
    "rx_recorded_data_saving_format": "SigMF",
    "nrecords": 2,
    "txs_execution": "parallel",
    "wireless_link_parameter_map": "wireless_link_parameter_map.yaml",
    "enable_console_logging": "True",
    "author": "Abdo Gaber",
    "description": "TRX use case", 
    "captured_data_file_name": "rx-wavefosrm-td-rec-", 
    "comment": "Using NI RF Data Recording API",
    "use_tx_timestamp": "False",
    "enable_mmwave": "False"
  },
  "transmitters_config": [
    {
      "RFmode": "Tx","type": "x300","IPaddress": "192.168.40.2",
      "Parameters": {
        "freq":           {"SeqType": "range",    "Values": [3.6e9, 3.6e9,100e6]},
        "lo_offset":      {"SeqType": "single",   "Values": 20.0e6},
        "enable_lo_offset":{"SeqType": "single",  "Values": "True"},
        "rate":           {"SeqType": "list",     "Values": [30.72e6]},
        "bandwidth":      {"SeqType": "list",     "Values": [20e6]},
        "rate_source":    {"SeqType": "single",   "Values": "waveform_config"},
        "waveform_generator": {"SeqType": "single","Values": "5gnr_ni_rfmx_rfws"},
        "waveform_file_name": {"SeqType": "list", "Values": ["NR_FR1_DL_FDD_SISO_BW-10MHz_CC-1_SCS-30kHz_OFDM_TM2"]},
        "waveform_path":  {"SeqType": "single",   "Values": "waveforms/nr/"},
        "waveform_path_type": {"SeqType": "single","Values": "relative"},
        "waveform_format":{"SeqType": "single",   "Values": "tdms"},
        "gain":           {"SeqType": "list",     "Values": [20]},
        "antenna":        {"SeqType": "list",     "Values": ["TX/RX"]}
      }
    }
  ],
  "common_transmitters_config": {
    "tx_clock_reference":       {"SeqType": "list",     "Values": ["internal"]},
    "tx_radio_id":        {"SeqType": "list",     "Values": [0]},
    "tx_radio_chan":      {"SeqType": "list",     "Values": [0]},
    "tx_replay_id":       {"SeqType": "list",     "Values": [0]},
    "tx_replay_chan":     {"SeqType": "list",     "Values": [0]},
    "tx_duc_chan":        {"SeqType": "list",     "Values": [0]},
    "tx_duc_id":        {"SeqType": "list",     "Values": [0]}},
  "receivers_config": [
    {
      "RFmode": "Rx", "type": "x300","IPaddress": "192.168.100.2",
      "Parameters": {
          "freq":         {"SeqType": "range",    "Values": [3.6e9, 3.6e9,100e6]},
          "rate":         {"SeqType": "list",     "Values": [30.72e6]},
          "bandwidth":    {"SeqType": "list",     "Values": [20e6]},
          "rate_source":  {"SeqType": "single",   "Values": "user_defined"},
          "gain":         {"SeqType": "list",     "Values": [20]},
          "channels":     {"SeqType": "list",     "Values": [0]},
          "antenna":      {"SeqType": "list",     "Values": ["TX/RX"]},
          "clock_reference":    {"SeqType": "list",     "Values": ["internal"]},
          "duration":     {"SeqType": "list",     "Values": [0.01]},
          "channel_attenuation_db": { "SeqType": "single","Values": 33}
      }
    }
  ]
}